<!-- /* * Copyright 2017 Google Inc. All rights reserved. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *
http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. * See the License for the specific language governing permissions and * limitations under the License. */ -->

<!-- page content -->
<div class="right_col" role="main" style="padding-top: 50px;">
  <!-- top tiles -->
  <div class="row">
    <div class="row tile_count">
      <span id="topBanner" hidden="hidden">
        <div class="col-md-2 col-sm-4 col-xs-6 tile_stats_count">
          <span class="count_top">
            Number of benchmarks</span>
          <div id="topBanner_numSeries" class="count"></div>
        </div>
        <div class="col-md-2 col-sm-4 col-xs-6 tile_stats_count">
          <span class="count_top">
            Better
          </span>
          <div id="topBanner_numSeriesBetter" class="count"></div>
          <span id="topBanner_numSeriesBetter_percent" class="count_bottom"></span>
        </div>
        <div class="col-md-2 col-sm-4 col-xs-6 tile_stats_count">
          <span class="count_top">
            Similar
          </span>
          <div id="topBanner_numSeriesSimilar" class="count"></div>
          <span id="topBanner_numSeriesSimilar_percent" class="count_bottom"></span>
        </div>
        <div class="col-md-2 col-sm-4 col-xs-6 tile_stats_count">
          <span class="count_top">
            Lower</span>
          <div id="topBanner_numSeriesLower" class="count"></div>
          <span id="topBanner_numSeriesLower_percent" class="count_bottom"></span>
        </div>
      </span>
    </div>
  </div>

  <!-- /top tiles -->
  <div class="">

    <div class="clearfix"></div>

    <div id="rowNoDataToShow" class="row" hidden="hidden">
      <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
          <div class="x_title">
            <h2>Benchmarks</h2>
            <div class="clearfix"></div>
          </div>
          <div class="x_content">
            <p>No benchmarks to show.</p>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div id='rowTable' class="col-md-12 col-sm-12 col-xs-12" hidden="hidden">
        <div class="x_panel">
          <div class="x_title">
            <h2>Benchmarks
            </h2>
            <ul class="nav navbar-right panel_toolbox">

              <!-- <li class="dropdown"> <a href="#download"><i class="fa fa-download"></i></a> </li> -->
              <li>
                <button id='btnShowLower' type="button" class="btn btn-primary btn-xs active">Lower</button>
              </li>
              <li>
                <button id='btnShowBetter' type="button" class="btn btn-primary btn-xs">Better</button>
              </li>
              <li>
                <button id='btnShowSimilar' type="button" class="btn btn-primary btn-xs">Similar</button>
              </li>
              <li>
                <button id='btnShowAll' type="button" class="btn btn-primary btn-xs">All</button>
              </li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div id="serieContent" class="x_content">
            <table id="serieDatatable" class="table table-striped table-bordered table-condensed">
              <thead id='table_head'></thead>
              <tbody id='table_content'></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    <div class="clearfix"></div>
    <br>
  </div>
</div>

<%- include('modalAddBugLink') %>

  <%- include('footer') %>

    <!-- jQuery -->
    <script src="/third_party/jquery/dist/jquery.min.js"></script>
    <!-- Bootstrap -->
    <script src="/third_party/bootstrap/dist/js/bootstrap.min.js"></script>
    <!-- FastClick -->
    <script src="/third_party/fastclick/lib/fastclick.js"></script>
    <!-- NProgress -->
    <script src="/third_party/nprogress/nprogress.js"></script>

    <!-- Datatables -->
    <script src="/third_party/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="/third_party/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
    <script src="/third_party/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
    <script src="/third_party/datatables.net-buttons-bs/js/buttons.bootstrap.min.js"></script>
    <script src="/third_party/datatables.net-buttons/js/buttons.flash.min.js"></script>
    <script src="/third_party/datatables.net-buttons/js/buttons.html5.min.js"></script>
    <script src="/third_party/datatables.net-buttons/js/buttons.print.min.js"></script>
    <script src="/third_party/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"></script>
    <script src="/third_party/datatables.net-keytable/js/dataTables.keyTable.min.js"></script>
    <script src="/third_party/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="/third_party/datatables.net-responsive-bs/js/responsive.bootstrap.js"></script>
    <script src="/third_party/datatables.net-scroller/js/dataTables.scroller.min.js"></script>

    <!-- socket.io -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- Dygraph for sparklines -->
    <script type="text/javascript" src="/third_party/dygraph/js/dygraph.js"></script>
    <script type="text/javascript" src="/third_party/dygraph/js/synchronizer.js"></script>

    <!-- Linkify -->
    <script src="/third_party/linkify/linkify.min.js"></script>
    <script src="/third_party/linkify/linkify-jquery.min.js"></script>

    <!-- Custom Theme Scripts -->
    <script src="/third_party/gentelella/build/js/custom.js"></script>

    <script>
      var debug = false;
      var compareId,
        projectId,
        serieFilter,
        projects;
      var dataTableObject;
      var numSeries = 0;
      var numSeriesBetter = 0;
      var numSeriesLower = 0;
      var numSeriesSimilar = 0;
      var compare;
      var compares;
      var builds;
      var defLength = 10;

      function start(tprojectId, tcompareId, tSerieFilter) {
        projectId = tprojectId;
        compareId = tcompareId;
        serieFilter = tSerieFilter;

        socket = io();

        socket.on('receiveFileInfo', function (req) {
          if (debug)
            console.log('receiveFileInfo', req);
          if (req.fileId === 'compares') {
            compares = req.file;
            $('#page_title_description').html(compares[compareId].description + ' <small>Based on latest results</small>');
          } else if (req.fileId === 'builds') {
            builds = req.file;
          } else if (req.fileId === 'projects') {
            projects = req.file;
          } else
            compare = req.file;
          NProgress.inc();
          if ((compares) && (compare) && (builds) && (compares) && (projects))
            iAmReadyToProcessData();
          }
        );
        socket.on('serverError', function (req) {
          if (debug)
            console.log('serverError', req);
          alert(req)
        });

        if (debug)
          console.log('getFileInfo');
        NProgress.start();
        socket.emit('getFileInfo', {
          projectId: projectId,
          fileId: 'builds'
        });
        socket.emit('getFileInfo', {
          projectId: 'admin',
          fileId: 'compares'
        });
        socket.emit('getFileInfo', {
          projectId: projectId,
          compareId: compareId,
          fileId: 'benchmarks.compare_' + compareId
        });
        socket.emit('getFileInfo', {
          projectId: 'admin',
          fileId: 'projects'
        });
      }

      function iAmReadyToProcessData() {
        NProgress.done();
        var k = Object.keys(compare);

        numSeries = 0;
        for (var ii = 0; ii < k.length; ii++) {
          var s = compare[k[ii]];
          if (serieFilter)
            if (k[ii].indexOf(serieFilter) === -1)
              continue;

          numSeries++;

          // convert an existing database
          if (s.state === 'none') {
            if (s.result.status === "better")
              s.state = 'betterNeedstriage';
            else
              s.state = 'similarNeedstriage';
            }
          if (s.state === 'assigned')
            s.state = 'lowerAssigned';
          if (s.state === 'new')
            s.state = 'lowerNeedstriage';
          if (s.state === 'wontfix')
            s.state = 'lowerIntended';

          if (s.state.indexOf('better') !== -1)
            numSeriesBetter++;
          if (s.state.indexOf('lower') !== -1)
            numSeriesLower++;
          if (s.state.indexOf('similar') !== -1)
            numSeriesSimilar++;
          }
        if (numSeries === 0) {
          $('#rowNoDataToShow').show();
          return;
        }
        $('#topBanner_numSeries').html(numSeries);
        $('#topBanner_numSeriesLower').html(numSeriesLower);
        if (numSeriesLower === 0)
          $('#topBanner_numSeriesLower').addClass('green')
        else
          $('#topBanner_numSeriesLower').addClass('red')

        $('#topBanner_numSeriesBetter').html(numSeriesBetter);
        if (numSeriesBetter === 0)
          $('#topBanner_numSeriesBetter').addClass('red')
        else
          $('#topBanner_numSeriesBetter').addClass('green')

        $('#topBanner_numSeriesSimilar').html(numSeriesSimilar);
        if (numSeriesSimilar === 0)
          $('#topBanner_numSeriesSimilar').addClass('red')
        else
          $('#topBanner_numSeriesSimilar').addClass('green')

        var p = numSeriesLower / numSeries * 100;
        $('#topBanner_numSeriesLower_percent').html(p.toFixed(2) + "%");
        p = numSeriesBetter / numSeries * 100;
        $('#topBanner_numSeriesBetter_percent').html(p.toFixed(2) + "%");
        p = numSeriesSimilar / numSeries * 100;
        $('#topBanner_numSeriesSimilar_percent').html(p.toFixed(2) + "%");

        if ((numSeriesLower === numSeries) || (numSeriesBetter === numSeries) || (numSeriesSimilar === numSeries)) {
          $('#btnShowAll').hide();
        }

        if (numSeriesLower === 0)
          $('#btnShowLower').hide();

        if (numSeriesSimilar === 0)
          $('#btnShowSimilar').hide();

        if (numSeriesBetter === 0)
          $('#btnShowBetter').hide();

        if (numSeriesLower !== 0) {
          $('#btnShowLower').addClass('active')
          showTable('lower');
        } else if (numSeriesSimilar !== 0) {
          $('#btnShowSimilar').addClass('active')
          showTable('similar');
        } else if (numSeriesBetter !== 0) {
          $('#btnShowBetter').addClass('active')
          showTable('better');
        }

        $('#btnShowBetter').click(function () {
          $('#btnShowBetter').addClass('active')
          $('#btnShowLower').removeClass('active')
          $('#btnShowSimilar').removeClass('active')
          $('#btnShowAll').removeClass('active')
          showTable('better');
        })
        $('#btnShowLower').click(function () {
          $('#btnShowBetter').removeClass('active')
          $('#btnShowLower').addClass('active')
          $('#btnShowSimilar').removeClass('active')
          $('#btnShowAll').removeClass('active')
          showTable('lower')
        })
        $('#btnShowSimilar').click(function () {
          $('#btnShowBetter').removeClass('active')
          $('#btnShowLower').removeClass('active')
          $('#btnShowSimilar').addClass('active')
          $('#btnShowAll').removeClass('active')
          showTable('similar')
        })
        $('#btnShowAll').click(function () {
          $('#btnShowBetter').removeClass('active')
          $('#btnShowLower').removeClass('active')
          $('#btnShowSimilar').removeClass('active')
          $('#btnShowAll').addClass('active')
          showTable('all')
        })

        $(document).ready(function () {
          $('#topBanner').show();
          $('#rowTable').show();
        });
      }

      function myChangeStateCompare(sel, serieId) {
        socket.emit('serieUpdateSeriesState', {
          projectId: projectId,
          serieId: serieId,
          state: sel.value,
          compareId: compareId
          // assignee: assignee, stateTarget: stateTarget, comment: comment
        });
        compare[serieId].state = sel.value;
        if (sel.value==='lowerConfirmed') {
          if (!compare[serieId].bugLink)
            addBugLink(serieId);
        }
      }

      function myGetStateTdDesc(state, serieId) {
        let h = '';
        h = '<td data-order="' + state + '" data-filter="' + state + '">';
        h += '<select name="state" onchange="myChangeStateCompare(this,\'' + serieId + '\');">';

        if (state.indexOf('lower') !== -1) {
          h += '<option ';
          if (state === 'lowerNeedstriage')
            h += 'selected ';
          h += 'value="lowerNeedstriage">Needs Triage</option>'

          h += '<option ';
          if (state === 'lowerConfirmed')
            h += 'selected ';
          h += 'value="lowerConfirmed">Lower confirmed</option>'

          if (!projects[projectId].useBugTracker) {
            h += '<option ';
            if (state === 'lowerAssigned')
              h += 'selected ';
            h += 'value="lowerAssigned">Assigned</option>'

            h += '<option ';
            if (state === 'lowerFixed')
              h += 'selected ';
            h += 'value="lowerFixed">Fixed</option>'
          }

          h += '<option ';
          if (state === 'lowerIntended')
            h += 'selected ';
          h += 'value="lowerIntended">Intended behavior</option>'
        }

        if (state.indexOf('better') !== -1) {
          h += '<option ';
          if (state === 'betterNeedstriage')
            h += 'selected ';
          h += 'value="betterNeedstriage">Needs Triage</option>'

          h += '<option ';
          if (state === 'betterConfirmed')
            h += 'selected ';
          h += 'value="betterConfirmed">Better confirmed</option>'
        }

        if (state.indexOf('similar') !== -1) {
          h += '<option ';
          if (state === 'similarNeedstriage')
            h += 'selected ';
          h += 'value="similarNeedstriage">Needs Triage</option>'

          if (!projects[projectId].useBugTracker) {
            h += '<option ';
            if (state === 'similarConfirmed')
              h += 'selected ';
            h += 'value="similarConfirmed">Similar confirmed</option>'
          }
        }
        h += '</select></td>';

        return (h);
      }

      function myChangeAssignee(sel, serieId) {
        socket.emit('serieUpdateAssignee', {
          projectId: projectId,
          serieId: serieId,
          assignee: sel.value,
          compareId: compareId
        });
        compare[serieId].assignee = sel.value;
      }

      function myGetAssigneeTd(assignee, serieId) {
        let h = '';
        h = '<td data-order="' + assignee + '" data-filter="' + assignee + '">';
        h += '<select name="assignee" onchange="myChangeAssignee(this,\'' + serieId + '\');">';
        h += '<option value="">None</option>';
        var k = projects[projectId].users.split(',');
        for (var ii = 0; ii < k.length; ii++) {
          h += '<option ';
          if (assignee === k[ii])
            h += 'selected ';
          h += 'value="' + k[ii] + '">' + k[ii] + '</option>';
        }
        h += '</select></td>';
        return (h);
      }

      function showTable(mode) {
        if (debug)
          console.log('showTable', mode);

        $('#serieContentGood').hide();
        $('#serieContent').show();

        if (dataTableObject !== undefined) {
          dataTableObject.destroy();
        }

        var h = '';

        h += '<tr>';
        h += '<th style="width: 70px">State</th>';
        if (!projects[projectId].useBugTracker)
          h += '<th>Assignee</th>';
        h += '<th>Serie Id</th>';
        h += '<th style="width: 60px">Analysis</th>';
        h += '<th style="width: 60px">My value</th>';
        h += '<th style="width: 60px">Compare value</th>';
        h += '<th style="width: 60px">Ratio</th>';
        h += '<th style="width: 90px" class="no-sort"></th>';
        h += '</tr>';
        $('#table_head').html(h);

        h = ''
        var k = Object.keys(compare);
        for (var ii = 0; ii < k.length; ii++) {

          if (serieFilter)
            if (k[ii].indexOf(serieFilter) === -1)
              continue;

          var s = compare[k[ii]];
          if (mode !== 'all')
            if (s.state.indexOf(mode) === -1)
              continue;

          h += '<tr>';
          h += myGetStateTdDesc(s.state, k[ii]);
          if (!projects[projectId].useBugTracker) {
            var ass;
            if (s.assignee)
              if (s.assignee !== 'none')
              ass = s.assignee;
            h += myGetAssigneeTd(ass, k[ii]);
          }
          h += '<td><div style="word-wrap: break-word; word-break: break-all; white-space: normal;">' + k[ii] + '</div></td>';
          if (s.state.indexOf('better') !== -1)
            h += '<td class="green"><b>Better</b></td>'
          if (s.state.indexOf('similar') !== -1)
            h += '<td class="green"><b>Similar</b></td>'
          if (s.state.indexOf('lower') !== -1)
            h += '<td class="red"><b>Lower</b></td>'
          h += '<td><b>' + s.result.myValue * 1 + '</b></td>';
          h += '<td><b>' + s.result.compareValue * 1 + '</b></td>';
          var p = s.result.diff / s.result.compareValue * 100;
          if (s.result.diff == 0) {
            //h += '<td>0</td>';
            h += '<td><b>0%</b></td>';
          }
          if (s.result.diff > 0) {
            //h += '<td>+' + s.result.diff.toFixed(2) + '</td>';
            h += '<td><b>+' + p.toFixed(2) + '%</b></td>';
          }
          if (s.result.diff < 0) {
            //h += '<td>' + s.result.diff.toFixed(2) + '</td>';
            h += '<td><b>' + p.toFixed(2) + '%</b></td>';
          }
          h += '<td><center>';
          h += '<div class="btn-group">';
          h += '<button type="button" onclick="openEditSerie(\'' + k[ii] + '\')" class="btn btn-danger btn-xs"><i class="fa fa-pencil" aria-hidden="true"></i></button>';
          if (s.url)
            h += '<button type="button" onclick="openSpongelink(\'' + k[ii] + '\')" class="btn btn-primary btn-xs"><i class="fa fa-external-link" aria-hidden="true"></i></button>';
          else
            h += '<button type="button" disabled class="btn btn-primary btn-xs"><i class="fa fa-external-link" aria-hidden="true"></i></button>';
          h += '<button type="button" onclick="addBugLink(\'' + k[ii] + '\')" class="btn btn-danger btn-xs"><i class="fa fa-bug" aria-hidden="true"></i></button>';
          if (s.bugLink) {
            h += '<button type="button" onclick="showOpenBugLink(\'' + k[ii] + '\')" class="btn btn-primary btn-xs"><i class="fa fa-bug" aria-hidden="true"></i></button>';
          } else {
            h += '<button type="button" disabled class="btn btn-primary btn-xs"><i class="fa fa-bug" aria-hidden="true"></i></button>';
          }
          h += '</div>';
          h += '</center></td>';
          h += '</tr>';
          h += '</td>';
          h += '</tr>';
        }

        $('#table_content').html(h);
        var orderColumn=5;
        if (!projects[projectId].useBugTracker) orderColumn=6;

        dataTableObject = $('#serieDatatable').DataTable({
          "language": {
            "decimal": "."
          },
          paging: true, // paging: true if > to 10 entries
          info: true,
          "bFilter": true,
          "columnDefs": [
            {
              "targets": 'no-sort',
              "orderable": false
            }
          ],
          "order": [
            [orderColumn, "desc"]
          ],
          "pageLength": defLength,
          "lengthMenu": [
            [
              10,
              15,
              20,
              25,
              50,
              -1
            ],
            [
              10,
              15,
              20,
              25,
              50,
              "All"
            ]
          ]
        });
        $('#serieDatatable').on('length.dt', function (e, s, l) {
          defLength = l;
        });
      }

      function addBugLink(theSerieId) {
        serieId = theSerieId;
        var s = compare[serieId];
        var p = s.result.diff / s.result.compareValue * 100;

        if (s.bugLink) {
          $('#AddBugLink_Link').val(s.bugLink);
        } else
          $('#AddBugLink_Link').val('');
        var report = '';
        if (s.state.indexOf('similar') !== -1)
          report += 'Compare status: similar';
        else if (s.state.indexOf('lower') !== -1)
          report += 'Compare status: lower';
        else if (s.state.indexOf('better') !== -1)
          report += 'Compare status: better';
        report += ' ';
        if (s.result.diff == 0) {
          report += '0%';
        } else {
          if (s.result.diff > 0)
            report += '+';
          report += p.toFixed(2) + '%';
        }
        report += ' confirmed';
        $('#proposalSubjectForBugReport').val(report);
        report = '';
        report += 'Benchmark: ' + serieId;
        report += '\r\n';
        report += 'Compare: ' + compareId;
        report += '\r\n\r\n';
        if (s.description)
          report += 'Description: ' + s.description + '\r\n\r\n';
        report += 'Compare analysis details:';
        report += '\r\n';
        if (s.state.indexOf('similar') !== -1)
          report += '- status: similar';
        else if (s.state.indexOf('lower') !== -1)
          report += '- status: lower';
        else if (s.state.indexOf('better') !== -1)
          report += '- status: better';
        report += '\r\n';
        report += '- my value: ' + s.result.myValue;
        report += '\r\n';
        report += '- compare value: ' + s.result.compareValue;
        report += '\r\n';
        report += '- raw difference: ';
        if (s.result.diff > 0)
          report += '+';
        report += s.result.diff;
        report += '\r\n';
        report += '- ratio: '
        if (s.result.diff == 0) {
          report += '0%';
        } else {
          if (s.result.diff > 0)
            report += '+';
          report += p.toFixed(2) + '%';
        }
        var danaUrl = 'http://<%=global.config.server.ip%>:<%=global.config.server.port%>';
        report += '\r\n\r\n';
        report += 'Links:';
        report += '\r\n';
        report += '- benchmark: ' + danaUrl + '/serie?' + projectId + '?' + encodeURIComponent(serieId);
        report += '\r\n';
        report += '- project benchmark status: ' + danaUrl + '/' + projectId + '/statusSeries';
        report += '\r\n';
        report += '- dana instance: ' + danaUrl;
        $('#proposalForBugReport').val(report);
        $('#myModalAddBugLink').modal();
      }
      $('#modalSaveBugLink').click(function () {
        var bugLink = $('#AddBugLink_Link').val();
        socket.emit('serieUpdateBugLink', {
          projectId: projectId,
          serieId: serieId,
          bugLink: bugLink,
          compareId: compareId
        });
        compare[serieId].bugLink = bugLink;
      });
      $('#modalCopySubjectClipboard').click(function () {
        var copyText = document.getElementById("proposalSubjectForBugReport");
        copyText.select();
        document.execCommand("Copy");
      })
      $('#modalCopyClipboard').click(function () {
        var copyText = document.getElementById("proposalForBugReport");
        copyText.select();
        document.execCommand("Copy");
      })

      function legendFormatter(data) {
        return '';
      }

      $(document).ready(function () {
        start(userPage.projectId, userPage.compareId, userPage.serieFilter);
        $('#myModal').on('shown.bs.modal', function (e) {
          uiShowSerie('statusSeries', projectId, serieId);
          $('#modal-table').show()
          $('#commentsArea').linkify({target: "_blank"});
        })
        $('#commentsArea').linkify({target: "_blank"});
      });

      function openEditSerie(serieId) {
        console.log('openEditSerie', projectId, serieId)
        window.open("/serie?" + projectId + '?' + encodeURIComponent(serieId), "_blank");
      }

      function openSpongelink(serieId) {
        console.log('openSpongelink', projectId, serieId)
        window.open(compare[serieId].url, "_blank");
      }

      function showOpenBugLink(serieId) {
        window.open(compare[serieId].bugLink, "_blank");
      }

      var userPage;

      function setComparePage(obj) {
        userPage = obj;
      }
    </script>
